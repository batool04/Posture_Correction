# -*- coding: utf-8 -*-
"""Posture_Correction_Using_Mediapipe.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HDJYSgQFq8M0F-R1TC4OlTcEGE5aClQs

The program usesOpenCV and mediapipe for posture Correction
"""

import cv2
import mediapipe as mp
import numpy as np
from google.colab.patches import cv2_imshow

# Initialize MediaPipe Pose class.
mp_pose = mp.solutions.pose
pose = mp_pose.Pose(static_image_mode=True, model_complexity=2)

# Function to calculate the angle between three points.
def calculate_angle(a, b, c):
    a = np.array(a)  # First
    b = np.array(b)  # Mid
    c = np.array(c)  # End

    radians = np.arctan2(c[1] - b[1], c[0] - b[0]) - np.arctan2(a[1] - b[1], a[0] - b[0])
    angle = np.abs(radians*180.0/np.pi)

    if angle > 180.0:
        angle = 360 - angle

    return angle

# Load an image and process it.
def process_image(image_path):
    image = cv2.imread(image_path)
    image_height, image_width, _ = image.shape
    image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

    results = pose.process(image_rgb)

    if results.pose_landmarks:
        landmarks = results.pose_landmarks.landmark

        # Define points for posture analysis
        ear = [landmarks[mp_pose.PoseLandmark.LEFT_EAR.value].x * image_width,
               landmarks[mp_pose.PoseLandmark.LEFT_EAR.value].y * image_height]
        shoulder = [landmarks[mp_pose.PoseLandmark.LEFT_SHOULDER.value].x * image_width,
                    landmarks[mp_pose.PoseLandmark.LEFT_SHOULDER.value].y * image_height]
        hip = [landmarks[mp_pose.PoseLandmark.LEFT_HIP.value].x * image_width,
               landmarks[mp_pose.PoseLandmark.LEFT_HIP.value].y * image_height]

        # Calculate angles
        angle_neck = calculate_angle(ear, shoulder, hip)  # Angle from ear, shoulder to hip

        # Evaluate posture
        posture_status = "Good Posture" if angle_neck > 160 else "Bad Posture"  # Assuming straighter is better

        # Annotate image
        cv2.putText(image, f"Neck Angle: {int(angle_neck)}", (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 1, cv2.LINE_AA)
        cv2.putText(image, posture_status, (10, 50), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2, cv2.LINE_AA)

    return image

# Example usage
image_path = "/content/77.PNG"
processed_image = process_image(image_path)
cv2_imshow(processed_image)
cv2.waitKey(0)
cv2.destroyAllWindows()